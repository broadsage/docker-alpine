name: Build and Push Alpine Images

on:
  push:
    branches:
      - main
    paths:
      - 'edge/**'
      - '3.*/**'
      - '.github/workflows/build-and-push.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'edge/**'
      - '3.*/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Alpine version to build (e.g., edge, 3.19.9)'
        required: false
        default: 'all'

env:
  REGISTRY: ghcr.io

permissions:
  contents: read

jobs:
  detect-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get-versions.outputs.versions }}
      image_name: ${{ steps.get-image-name.outputs.image_name }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Compute image name
        id: get-image-name
        env:
          REPO_NAME: ${{ github.event.repository.name }}
          REPO_OWNER: ${{ github.repository_owner }}
        run: |
          # Strip 'docker-' prefix from repository name
          IMAGE_NAME="${REPO_OWNER}/${REPO_NAME#docker-}"
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "Image name: ${IMAGE_NAME}"

      - name: Detect Alpine versions
        id: get-versions
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.version }}" != "all" ]; then
            # Build specific version from workflow dispatch
            VERSIONS='["${{ inputs.version }}"]'
          else
            # Detect all version directories
            VERSIONS=$(find . -maxdepth 1 -type d \( -name "edge" -o -name "3.*" \) -exec basename {} \; | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
          echo "versions=${VERSIONS}" >> $GITHUB_OUTPUT
          echo "Detected versions: ${VERSIONS}"

  build-and-push:
    needs: detect-versions
    runs-on: ubuntu-latest
    if: needs.detect-versions.outputs.versions != '[]'
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.detect-versions.outputs.versions) }}
        architecture:
          - aarch64
          - armhf
          - armv7
          - ppc64le
          - riscv64
          - s390x
          - x86
          - x86_64
    
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Check if Dockerfile exists
        id: check-dockerfile
        run: |
          if [ -f "${{ matrix.version }}/${{ matrix.architecture }}/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Dockerfile exists for ${{ matrix.version }}/${{ matrix.architecture }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Dockerfile not found for ${{ matrix.version }}/${{ matrix.architecture }}, skipping"
          fi

      - name: Set up QEMU
        if: steps.check-dockerfile.outputs.exists == 'true'
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        if: steps.check-dockerfile.outputs.exists == 'true'
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to GitHub Container Registry
        if: steps.check-dockerfile.outputs.exists == 'true' && github.event_name != 'pull_request'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.check-dockerfile.outputs.exists == 'true'
        id: meta
        run: |
          # Read VERSION file
          VERSION=$(cat ${{ matrix.version }}/VERSION | tr -d '\n')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Map architecture names to Docker platform names
          case "${{ matrix.architecture }}" in
            x86_64)   PLATFORM="linux/amd64" ;;
            aarch64)  PLATFORM="linux/arm64" ;;
            armhf)    PLATFORM="linux/arm/v6" ;;
            armv7)    PLATFORM="linux/arm/v7" ;;
            ppc64le)  PLATFORM="linux/ppc64le" ;;
            riscv64)  PLATFORM="linux/riscv64" ;;
            s390x)    PLATFORM="linux/s390x" ;;
            x86)      PLATFORM="linux/386" ;;
            *)        PLATFORM="linux/amd64" ;;
          esac
          echo "platform=${PLATFORM}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: steps.check-dockerfile.outputs.exists == 'true'
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: ${{ matrix.version }}/${{ matrix.architecture }}
          platforms: ${{ steps.meta.outputs.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ needs.detect-versions.outputs.image_name }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          labels: |
            org.opencontainers.image.title=Alpine Linux
            org.opencontainers.image.description=Alpine Linux minimal container image - ${{ matrix.architecture }} architecture
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=Broadsage Corporation Limited
            org.opencontainers.image.base.name=scratch
            org.opencontainers.image.ref.name=${{ matrix.version }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            alpine.architecture=${{ matrix.architecture }}
            alpine.version=${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export digest
        if: steps.check-dockerfile.outputs.exists == 'true' && github.event_name != 'pull_request'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          echo "Exported digest: $digest for ${{ matrix.architecture }}"

      - name: Upload digest
        if: steps.check-dockerfile.outputs.exists == 'true' && github.event_name != 'pull_request'
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.6.0
        with:
          name: digests-${{ matrix.version }}-${{ matrix.architecture }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  create-manifest:
    needs: [detect-versions, build-and-push]
    if: github.event_name != 'pull_request' && needs.detect-versions.outputs.versions != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.detect-versions.outputs.versions) }}
    
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download digests
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.version }}-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read VERSION file
        id: version
        run: |
          VERSION=$(cat ${{ matrix.version }}/VERSION | tr -d '\n')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create and push manifest
        id: manifest
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          IMAGE_NAME="${{ env.REGISTRY }}/${{ needs.detect-versions.outputs.image_name }}"
          
          # Prepare tags
          if [ "${{ matrix.version }}" = "edge" ]; then
            TAGS="${IMAGE_NAME}:edge"
          else
            MAJOR_MINOR=$(echo ${{ matrix.version }} | cut -d. -f1-2)
            TAGS="${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${MAJOR_MINOR}"
            
            # Check if this is the newest non-edge version for 'latest' tag
            NEWEST=$(find . -maxdepth 1 -type d -name "3.*" -exec basename {} \; | sort -V | tail -1)
            if [ "${{ matrix.version }}" = "${NEWEST}" ]; then
              TAGS="${TAGS} ${IMAGE_NAME}:latest"
            fi
          fi
          
          # Build manifest from digests
          docker buildx imagetools create $(printf -- "-t %s " ${TAGS}) \
            $(printf "$IMAGE_NAME@sha256:%s " $(ls /tmp/digests))
          
          # Get the manifest digest for attestation
          MANIFEST_TAG=$(echo ${TAGS} | awk '{print $1}')
          RAW=$(docker buildx imagetools inspect "${MANIFEST_TAG}" --raw 2>/dev/null || true)
          if [ -z "${RAW}" ]; then
            echo "Failed to inspect manifest ${MANIFEST_TAG}" >&2
            exit 1
          fi
          DIGEST=$(echo "${RAW}" | jq -r '.Descriptor.digest // .descriptor.digest // .manifests[0].digest // .Digest' | head -n1)
          if [ -z "${DIGEST}" ] || [ "${DIGEST}" = "null" ]; then
            echo "Unable to determine manifest digest for ${MANIFEST_TAG}" >&2
            exit 1
          fi
          echo "manifest_digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "manifest_tag=${MANIFEST_TAG}" >> $GITHUB_OUTPUT
          echo "Created manifest with tags: ${TAGS}"
          echo "Manifest digest: ${DIGEST}"

      - name: Generate SBOM (Anchore)
        id: generate-sbom
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.manifest.outputs.manifest_tag }}
          format: 'spdx-json'
          output-file: 'sbom-${{ matrix.version }}.spdx.json'
          artifact-name: 'sbom-${{ matrix.version }}'

      - name: Attest SBOM (actions/attest-sbom)
        id: attest
        uses: actions/attest-sbom@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ needs.detect-versions.outputs.image_name }}
          subject-digest: ${{ steps.manifest.outputs.manifest_digest }}
          sbom-path: 'sbom-${{ matrix.version }}.spdx.json'
          push-to-registry: true
          show-summary: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}