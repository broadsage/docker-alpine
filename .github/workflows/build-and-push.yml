name: Build and Push Alpine Images

on:
  push:
    branches:
      - master
    paths:
      - 'edge/**'
      - '3.*/**'
      - '.github/workflows/build-and-push.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'edge/**'
      - '3.*/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Alpine version to build (e.g., edge, 3.19.9)'
        required: false
        default: 'all'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get-versions.outputs.versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Alpine versions
        id: get-versions
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.version }}" != "all" ]; then
            # Build specific version from workflow dispatch
            VERSIONS='["${{ inputs.version }}"]'
          else
            # Detect all version directories
            VERSIONS=$(find . -maxdepth 1 -type d \( -name "edge" -o -name "3.*" \) -exec basename {} \; | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
          echo "versions=${VERSIONS}" >> $GITHUB_OUTPUT
          echo "Detected versions: ${VERSIONS}"

  build-and-push:
    needs: detect-versions
    runs-on: ubuntu-latest
    if: needs.detect-versions.outputs.versions != '[]'
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.detect-versions.outputs.versions) }}
        architecture:
          - aarch64
          - armhf
          - armv7
          - ppc64le
          - riscv64
          - s390x
          - x86
          - x86_64
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if Dockerfile exists
        id: check-dockerfile
        run: |
          if [ -f "${{ matrix.version }}/${{ matrix.architecture }}/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Dockerfile exists for ${{ matrix.version }}/${{ matrix.architecture }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Dockerfile not found for ${{ matrix.version }}/${{ matrix.architecture }}, skipping"
          fi

      - name: Set up QEMU
        if: steps.check-dockerfile.outputs.exists == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check-dockerfile.outputs.exists == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.check-dockerfile.outputs.exists == 'true' && github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.check-dockerfile.outputs.exists == 'true'
        id: meta
        run: |
          # Read VERSION file
          VERSION=$(cat ${{ matrix.version }}/VERSION | tr -d '\n')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Map architecture names to Docker platform names
          case "${{ matrix.architecture }}" in
            x86_64)   PLATFORM="linux/amd64" ;;
            aarch64)  PLATFORM="linux/arm64" ;;
            armhf)    PLATFORM="linux/arm/v6" ;;
            armv7)    PLATFORM="linux/arm/v7" ;;
            ppc64le)  PLATFORM="linux/ppc64le" ;;
            riscv64)  PLATFORM="linux/riscv64" ;;
            s390x)    PLATFORM="linux/s390x" ;;
            x86)      PLATFORM="linux/386" ;;
            *)        PLATFORM="linux/amd64" ;;
          esac
          echo "platform=${PLATFORM}" >> $GITHUB_OUTPUT
          
          # Create temporary tag for building (will be used only for manifest creation)
          if [ "${{ matrix.version }}" = "edge" ]; then
            TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-edge-${{ matrix.architecture }}-${{ github.run_id }}"
          else
            TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${VERSION}-${{ matrix.architecture }}-${{ github.run_id }}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: steps.check-dockerfile.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.version }}/${{ matrix.architecture }}
          platforms: ${{ steps.meta.outputs.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tag }}
          labels: |
            org.opencontainers.image.title=Alpine Linux
            org.opencontainers.image.description=Alpine Linux minimal container image - ${{ matrix.architecture }} architecture
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=Broadsage Corporation Limited
            org.opencontainers.image.base.name=scratch
            org.opencontainers.image.ref.name=${{ matrix.version }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/master/README.md
            alpine.architecture=${{ matrix.architecture }}
            alpine.version=${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    needs: [detect-versions, build-and-push]
    if: github.event_name != 'pull_request' && needs.detect-versions.outputs.versions != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.detect-versions.outputs.versions) }}
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read VERSION file
        id: version
        run: |
          VERSION=$(cat ${{ matrix.version }}/VERSION | tr -d '\n')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create and push manifest
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          RUN_ID="${{ github.run_id }}"
          
          # Determine available architectures
          ARCHITECTURES=""
          for arch in aarch64 armhf armv7 ppc64le riscv64 s390x x86 x86_64; do
            if [ -f "${{ matrix.version }}/${arch}/Dockerfile" ]; then
              ARCHITECTURES="${ARCHITECTURES} ${arch}"
            fi
          done
          
          # Create manifest for version-specific tag
          if [ "${{ matrix.version }}" = "edge" ]; then
            MANIFEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:edge"
          else
            MANIFEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
          fi
          
          # Build manifest create command using temporary build tags
          MANIFEST_CMD="docker buildx imagetools create -t ${MANIFEST_TAG}"
          for arch in ${ARCHITECTURES}; do
            if [ "${{ matrix.version }}" = "edge" ]; then
              MANIFEST_CMD="${MANIFEST_CMD} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-edge-${arch}-${RUN_ID}"
            else
              MANIFEST_CMD="${MANIFEST_CMD} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${VERSION}-${arch}-${RUN_ID}"
            fi
          done
          
          echo "Creating manifest: ${MANIFEST_TAG}"
          eval ${MANIFEST_CMD}
          
          # Also create major.minor tag for non-edge versions
          if [ "${{ matrix.version }}" != "edge" ]; then
            MAJOR_MINOR=$(echo ${{ matrix.version }} | cut -d. -f1-2)
            MAJOR_MINOR_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${MAJOR_MINOR}"
            
            MANIFEST_CMD="docker buildx imagetools create -t ${MAJOR_MINOR_TAG}"
            for arch in ${ARCHITECTURES}; do
              MANIFEST_CMD="${MANIFEST_CMD} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${VERSION}-${arch}-${RUN_ID}"
            done
            
            echo "Creating manifest: ${MAJOR_MINOR_TAG}"
            eval ${MANIFEST_CMD}
          fi

      - name: Create latest tag for newest version
        if: matrix.version != 'edge'
        run: |
          # Find the newest non-edge version
          NEWEST=$(find . -maxdepth 1 -type d -name "3.*" -exec basename {} \; | sort -V | tail -1)
          
          if [ "${{ matrix.version }}" = "${NEWEST}" ]; then
            VERSION="${{ steps.version.outputs.version }}"
            RUN_ID="${{ github.run_id }}"
            
            # Determine available architectures
            ARCHITECTURES=""
            for arch in aarch64 armhf armv7 ppc64le riscv64 s390x x86 x86_64; do
              if [ -f "${{ matrix.version }}/${arch}/Dockerfile" ]; then
                ARCHITECTURES="${ARCHITECTURES} ${arch}"
              fi
            done
            
            MANIFEST_CMD="docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            for arch in ${ARCHITECTURES}; do
              MANIFEST_CMD="${MANIFEST_CMD} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:build-${VERSION}-${arch}-${RUN_ID}"
            done
            
            echo "Creating manifest: latest"
            eval ${MANIFEST_CMD}
          fi

  cleanup-temp-tags:
    needs: [detect-versions, build-and-push, create-manifest]
    if: always() && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.detect-versions.outputs.versions) }}
    
    permissions:
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Delete temporary build tags
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RUN_ID="${{ github.run_id }}"
          VERSION=$(cat ${{ matrix.version }}/VERSION | tr -d '\n' 2>/dev/null || echo "unknown")
          
          # Delete temporary tags for each architecture
          for arch in aarch64 armhf armv7 ppc64le riscv64 s390x x86 x86_64; do
            if [ -f "${{ matrix.version }}/${arch}/Dockerfile" ]; then
              if [ "${{ matrix.version }}" = "edge" ]; then
                TAG="build-edge-${arch}-${RUN_ID}"
              else
                TAG="build-${VERSION}-${arch}-${RUN_ID}"
              fi
              
              echo "Attempting to delete temporary tag: ${TAG}"
              
              # Use GitHub API to delete the package version
              # Note: This requires the package to exist; errors are ignored
              curl -X DELETE \
                -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/user/packages/container/$(echo ${{ env.IMAGE_NAME }} | cut -d'/' -f2)/versions?tag=${TAG}" \
                2>/dev/null || echo "Tag ${TAG} may not exist or already deleted"
            fi
          done

